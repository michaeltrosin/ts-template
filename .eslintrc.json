{
    "env": {
        "browser": true,
        "es2021": true,
        "node": true
    },
    "rules": {
        "@typescript-eslint/ban-ts-ignore": [
            "off"
        ],
        "@typescript-eslint/camelcase": [
            "off"
        ],
        "@typescript-eslint/explicit-function-return-type": [
            "off"
        ],
        "@typescript-eslint/interface-name-prefix": [
            "off"
        ],
        "@typescript-eslint/no-explicit-any": [
            "off"
        ],
        "@typescript-eslint/no-unused-expressions": [
            "off"
        ],
        "@typescript-eslint/no-var-requires": [
            "off"
        ],
        "@typescript-eslint/no-use-before-define": [
            "off"
        ],
        "@typescript-eslint/no-useless-constructor": [
            "error"
        ],
        "comma-dangle": [
            "error",
            "always-multiline"
        ],
        "no-async-promise-executor": [
            "off"
        ],
        "no-empty-pattern": [
            "off"
        ],
        "no-undef": [
            "error"
        ],
        "no-useless-constructor": "off",
        "no-var": [
            "error"
        ],
        "object-curly-spacing": [
            "error",
            "always"
        ],
        "quotes": [
            "error",
            "single",
            {
                "allowTemplateLiterals": true
            }
        ],
        "semi": [
            "error",
            "always"
        ],
        "spaced-comment": [
            "off"
        ],
        "no-prototype-builtins": [
            "off"
        ],
        "sort-keys": [
            "off"
        ],
        "space-before-function-paren": [
            "off"
        ],
        "indent": [
            "off"
        ]
    },
    "extends": [
        "standard",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:react/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "ecmaFeatures": {
            "jsx": true
        },
        "sourceType": "module"
    },
    "settings": {
        "react": {
            "createClass": "createReactClass", // Regex for Component Factory to use,
            // default to "createReactClass"
            "pragma": "React", // Pragma to use, default to "React"
            "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
            "version": "detect", // React version. "detect" automatically picks the version you have installed.
            // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
            // default to latest and warns if missing
            // It will default to "detect" in the future
            "flowVersion": "0.53" // Flow version
        },
        "propWrapperFunctions": [
            // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
            "forbidExtraProps",
            {
                "property": "freeze",
                "object": "Object"
            },
            {
                "property": "myFavoriteWrapper"
            },
            // for rules that check exact prop wrappers
            {
                "property": "forbidExtraProps",
                "exact": true
            }
        ],
        "componentWrapperFunctions": [
            // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
            "observer", // `property`
            {
                "property": "styled"
            }, // `object` is optional
            {
                "property": "observer",
                "object": "Mobx"
            },
            {
                "property": "observer",
                "object": "<pragma>"
            } // sets `object` to whatever value `settings.react.pragma` is set to
        ],
        "formComponents": [
            // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />
            "CustomForm",
            {
                "name": "Form",
                "formAttribute": "endpoint"
            }
        ],
        "linkComponents": [
            // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
            "Hyperlink",
            {
                "name": "Link",
                "linkAttribute": "to"
            }
        ]
    },
    "plugins": [
        "prettier",
        "@typescript-eslint"
    ]
}
